//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Newtonsoft_Json_Linq_JObjectWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Newtonsoft.Json.Linq.JObject), typeof(Newtonsoft.Json.Linq.JContainer));
		L.RegFunction("WriteToAsync", WriteToAsync);
		L.RegFunction("LoadAsync", LoadAsync);
		L.RegFunction("Properties", Properties);
		L.RegFunction("Property", Property);
		L.RegFunction("PropertyValues", PropertyValues);
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("set_Item", set_Item);
		L.RegFunction("Load", Load);
		L.RegFunction("Parse", Parse);
		L.RegFunction("FromObject", FromObject);
		L.RegFunction("WriteTo", WriteTo);
		L.RegFunction("GetValue", GetValue);
		L.RegFunction("TryGetValue", TryGetValue);
		L.RegFunction("Add", Add);
		L.RegFunction("ContainsKey", ContainsKey);
		L.RegFunction("Remove", Remove);
		L.RegFunction("GetEnumerator", GetEnumerator);
		L.RegFunction("New", _CreateNewtonsoft_Json_Linq_JObject);
		L.RegVar("this", _this, null);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Type", get_Type, null);
		L.RegVar("PropertyChanged", get_PropertyChanged, set_PropertyChanged);
		L.RegVar("PropertyChanging", get_PropertyChanging, set_PropertyChanging);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNewtonsoft_Json_Linq_JObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Newtonsoft.Json.Linq.JObject obj = new Newtonsoft.Json.Linq.JObject();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<Newtonsoft.Json.Linq.JObject>(L, 1))
			{
				Newtonsoft.Json.Linq.JObject arg0 = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				Newtonsoft.Json.Linq.JObject obj = new Newtonsoft.Json.Linq.JObject(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				Newtonsoft.Json.Linq.JObject obj = new Newtonsoft.Json.Linq.JObject(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (TypeChecker.CheckParamsType<object>(L, 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				Newtonsoft.Json.Linq.JObject obj = new Newtonsoft.Json.Linq.JObject(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Newtonsoft.Json.Linq.JObject.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				Newtonsoft.Json.Linq.JToken o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				Newtonsoft.Json.Linq.JToken o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to operator method: Newtonsoft.Json.Linq.JObject.this");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _set_this(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, Newtonsoft.Json.Linq.JToken>(L, 2))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				Newtonsoft.Json.Linq.JToken arg1 = (Newtonsoft.Json.Linq.JToken)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<object, Newtonsoft.Json.Linq.JToken>(L, 2))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				Newtonsoft.Json.Linq.JToken arg1 = (Newtonsoft.Json.Linq.JToken)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to operator method: Newtonsoft.Json.Linq.JObject.this");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, _set_this);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteToAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckTypes<Newtonsoft.Json.Linq.JObject, Newtonsoft.Json.JsonWriter, System.Threading.CancellationToken>(L, 1) && TypeChecker.CheckParamsType<Newtonsoft.Json.JsonConverter>(L, 4, count - 3))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				Newtonsoft.Json.JsonWriter arg0 = (Newtonsoft.Json.JsonWriter)ToLua.ToObject(L, 2);
				System.Threading.CancellationToken arg1 = StackTraits<System.Threading.CancellationToken>.To(L, 3);
				Newtonsoft.Json.JsonConverter[] arg2 = ToLua.ToParamsObject<Newtonsoft.Json.JsonConverter>(L, 4, count - 3);
				System.Threading.Tasks.Task o = obj.WriteToAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<Newtonsoft.Json.Linq.JObject, Newtonsoft.Json.JsonWriter>(L, 1) && TypeChecker.CheckParamsType<Newtonsoft.Json.JsonConverter>(L, 3, count - 2))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				Newtonsoft.Json.JsonWriter arg0 = (Newtonsoft.Json.JsonWriter)ToLua.ToObject(L, 2);
				Newtonsoft.Json.JsonConverter[] arg1 = ToLua.ToParamsObject<Newtonsoft.Json.JsonConverter>(L, 3, count - 2);
				System.Threading.Tasks.Task o = obj.WriteToAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.WriteToAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JObject> o = Newtonsoft.Json.Linq.JObject.LoadAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Threading.CancellationToken>(L, 2))
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				System.Threading.CancellationToken arg1 = StackTraits<System.Threading.CancellationToken>.To(L, 2);
				System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JObject> o = Newtonsoft.Json.Linq.JObject.LoadAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Newtonsoft.Json.Linq.JsonLoadSettings>(L, 2))
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				Newtonsoft.Json.Linq.JsonLoadSettings arg1 = (Newtonsoft.Json.Linq.JsonLoadSettings)ToLua.ToObject(L, 2);
				System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JObject> o = Newtonsoft.Json.Linq.JObject.LoadAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				Newtonsoft.Json.Linq.JsonLoadSettings arg1 = (Newtonsoft.Json.Linq.JsonLoadSettings)ToLua.CheckObject<Newtonsoft.Json.Linq.JsonLoadSettings>(L, 2);
				System.Threading.CancellationToken arg2 = StackTraits<System.Threading.CancellationToken>.Check(L, 3);
				System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JObject> o = Newtonsoft.Json.Linq.JObject.LoadAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.LoadAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Properties(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
			System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JProperty> o = obj.Properties();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Property(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				Newtonsoft.Json.Linq.JProperty o = obj.Property(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.StringComparison arg1 = (System.StringComparison)ToLua.CheckObject(L, 3, typeof(System.StringComparison));
				Newtonsoft.Json.Linq.JProperty o = obj.Property(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.Property");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PropertyValues(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
			Newtonsoft.Json.Linq.JEnumerable<Newtonsoft.Json.Linq.JToken> o = obj.PropertyValues();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				Newtonsoft.Json.Linq.JToken o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				Newtonsoft.Json.Linq.JToken o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.get_Item");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Item(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, Newtonsoft.Json.Linq.JToken>(L, 2))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				Newtonsoft.Json.Linq.JToken arg1 = (Newtonsoft.Json.Linq.JToken)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<object, Newtonsoft.Json.Linq.JToken>(L, 2))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				Newtonsoft.Json.Linq.JToken arg1 = (Newtonsoft.Json.Linq.JToken)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.set_Item");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Load(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				Newtonsoft.Json.Linq.JsonLoadSettings arg1 = (Newtonsoft.Json.Linq.JsonLoadSettings)ToLua.CheckObject<Newtonsoft.Json.Linq.JsonLoadSettings>(L, 2);
				Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Load(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.Load");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Parse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Newtonsoft.Json.Linq.JsonLoadSettings arg1 = (Newtonsoft.Json.Linq.JsonLoadSettings)ToLua.CheckObject<Newtonsoft.Json.Linq.JsonLoadSettings>(L, 2);
				Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.Parse");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FromObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.FromObject(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				Newtonsoft.Json.JsonSerializer arg1 = (Newtonsoft.Json.JsonSerializer)ToLua.CheckObject<Newtonsoft.Json.JsonSerializer>(L, 2);
				Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.FromObject(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.FromObject");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
			Newtonsoft.Json.JsonWriter arg0 = (Newtonsoft.Json.JsonWriter)ToLua.CheckObject<Newtonsoft.Json.JsonWriter>(L, 2);
			Newtonsoft.Json.JsonConverter[] arg1 = ToLua.CheckParamsObject<Newtonsoft.Json.JsonConverter>(L, 3, count - 2);
			obj.WriteTo(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				Newtonsoft.Json.Linq.JToken o = obj.GetValue(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.StringComparison arg1 = (System.StringComparison)ToLua.CheckObject(L, 3, typeof(System.StringComparison));
				Newtonsoft.Json.Linq.JToken o = obj.GetValue(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.GetValue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryGetValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				Newtonsoft.Json.Linq.JToken arg1 = null;
				bool o = obj.TryGetValue(arg0, out arg1);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushObject(L, arg1);
				return 2;
			}
			else if (count == 4)
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.StringComparison arg1 = (System.StringComparison)ToLua.CheckObject(L, 3, typeof(System.StringComparison));
				Newtonsoft.Json.Linq.JToken arg2 = null;
				bool o = obj.TryGetValue(arg0, arg1, out arg2);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushObject(L, arg2);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.TryGetValue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				obj.Add(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				Newtonsoft.Json.Linq.JToken arg1 = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 3);
				obj.Add(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.Add");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.ContainsKey(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				obj.Remove();
				return 0;
			}
			else if (count == 2)
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool o = obj.Remove(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.Remove");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject<Newtonsoft.Json.Linq.JObject>(L, 1);
			System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,Newtonsoft.Json.Linq.JToken>> o = obj.GetEnumerator();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)o;
			Newtonsoft.Json.Linq.JTokenType ret = obj.Type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PropertyChanged(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.ComponentModel.PropertyChangedEventHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PropertyChanging(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.ComponentModel.PropertyChangingEventHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PropertyChanged(IntPtr L)
	{
		try
		{
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject(L, 1, typeof(Newtonsoft.Json.Linq.JObject));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Newtonsoft.Json.Linq.JObject.PropertyChanged' can only appear on the left hand side of += or -= when used outside of the type 'Newtonsoft.Json.Linq.JObject'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.ComponentModel.PropertyChangedEventHandler ev = (System.ComponentModel.PropertyChangedEventHandler)arg0.func;
				obj.PropertyChanged += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.ComponentModel.PropertyChangedEventHandler ev = (System.ComponentModel.PropertyChangedEventHandler)arg0.func;
				obj.PropertyChanged -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PropertyChanging(IntPtr L)
	{
		try
		{
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject(L, 1, typeof(Newtonsoft.Json.Linq.JObject));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Newtonsoft.Json.Linq.JObject.PropertyChanging' can only appear on the left hand side of += or -= when used outside of the type 'Newtonsoft.Json.Linq.JObject'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.ComponentModel.PropertyChangingEventHandler ev = (System.ComponentModel.PropertyChangingEventHandler)arg0.func;
				obj.PropertyChanging += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.ComponentModel.PropertyChangingEventHandler ev = (System.ComponentModel.PropertyChangingEventHandler)arg0.func;
				obj.PropertyChanging -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

