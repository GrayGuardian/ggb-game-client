//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Newtonsoft_Json_Linq_JTokenWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Newtonsoft.Json.Linq.JToken), typeof(System.Object));
		L.RegFunction("WriteToAsync", WriteToAsync);
		L.RegFunction("ReadFromAsync", ReadFromAsync);
		L.RegFunction("LoadAsync", LoadAsync);
		L.RegFunction("DeepEquals", DeepEquals);
		L.RegFunction("AddAfterSelf", AddAfterSelf);
		L.RegFunction("AddBeforeSelf", AddBeforeSelf);
		L.RegFunction("Ancestors", Ancestors);
		L.RegFunction("AncestorsAndSelf", AncestorsAndSelf);
		L.RegFunction("AfterSelf", AfterSelf);
		L.RegFunction("BeforeSelf", BeforeSelf);
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("set_Item", set_Item);
		L.RegFunction("Children", Children);
		L.RegFunction("Remove", Remove);
		L.RegFunction("Replace", Replace);
		L.RegFunction("WriteTo", WriteTo);
		L.RegFunction("ToString", ToString);
		L.RegFunction("CreateReader", CreateReader);
		L.RegFunction("FromObject", FromObject);
		L.RegFunction("ToObject", ToObject);
		L.RegFunction("ReadFrom", ReadFrom);
		L.RegFunction("Parse", Parse);
		L.RegFunction("Load", Load);
		L.RegFunction("SelectToken", SelectToken);
		L.RegFunction("SelectTokens", SelectTokens);
		L.RegFunction("DeepClone", DeepClone);
		L.RegFunction("AddAnnotation", AddAnnotation);
		L.RegFunction("Annotation", Annotation);
		L.RegFunction("Annotations", Annotations);
		L.RegFunction("RemoveAnnotations", RemoveAnnotations);
		L.RegVar("this", _this, null);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("EqualityComparer", get_EqualityComparer, null);
		L.RegVar("Parent", get_Parent, null);
		L.RegVar("Root", get_Root, null);
		L.RegVar("Type", get_Type, null);
		L.RegVar("HasValues", get_HasValues, null);
		L.RegVar("Next", get_Next, null);
		L.RegVar("Previous", get_Previous, null);
		L.RegVar("Path", get_Path, null);
		L.RegVar("First", get_First, null);
		L.RegVar("Last", get_Last, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			Newtonsoft.Json.Linq.JToken o = obj[arg0];
			ToLua.PushObject(L, o);
			return 1;

		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _set_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			Newtonsoft.Json.Linq.JToken arg1 = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 3);
			obj[arg0] = arg1;
			return 0;

		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, _set_this);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteToAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckTypes<Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.JsonWriter, System.Threading.CancellationToken>(L, 1) && TypeChecker.CheckParamsType<Newtonsoft.Json.JsonConverter>(L, 4, count - 3))
			{
				Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.ToObject(L, 1);
				Newtonsoft.Json.JsonWriter arg0 = (Newtonsoft.Json.JsonWriter)ToLua.ToObject(L, 2);
				System.Threading.CancellationToken arg1 = StackTraits<System.Threading.CancellationToken>.To(L, 3);
				Newtonsoft.Json.JsonConverter[] arg2 = ToLua.ToParamsObject<Newtonsoft.Json.JsonConverter>(L, 4, count - 3);
				System.Threading.Tasks.Task o = obj.WriteToAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.JsonWriter>(L, 1) && TypeChecker.CheckParamsType<Newtonsoft.Json.JsonConverter>(L, 3, count - 2))
			{
				Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.ToObject(L, 1);
				Newtonsoft.Json.JsonWriter arg0 = (Newtonsoft.Json.JsonWriter)ToLua.ToObject(L, 2);
				Newtonsoft.Json.JsonConverter[] arg1 = ToLua.ToParamsObject<Newtonsoft.Json.JsonConverter>(L, 3, count - 2);
				System.Threading.Tasks.Task o = obj.WriteToAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JToken.WriteToAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFromAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JToken> o = Newtonsoft.Json.Linq.JToken.ReadFromAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Threading.CancellationToken>(L, 2))
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				System.Threading.CancellationToken arg1 = StackTraits<System.Threading.CancellationToken>.To(L, 2);
				System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JToken> o = Newtonsoft.Json.Linq.JToken.ReadFromAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Newtonsoft.Json.Linq.JsonLoadSettings>(L, 2))
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				Newtonsoft.Json.Linq.JsonLoadSettings arg1 = (Newtonsoft.Json.Linq.JsonLoadSettings)ToLua.ToObject(L, 2);
				System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JToken> o = Newtonsoft.Json.Linq.JToken.ReadFromAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				Newtonsoft.Json.Linq.JsonLoadSettings arg1 = (Newtonsoft.Json.Linq.JsonLoadSettings)ToLua.CheckObject<Newtonsoft.Json.Linq.JsonLoadSettings>(L, 2);
				System.Threading.CancellationToken arg2 = StackTraits<System.Threading.CancellationToken>.Check(L, 3);
				System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JToken> o = Newtonsoft.Json.Linq.JToken.ReadFromAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JToken.ReadFromAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JToken> o = Newtonsoft.Json.Linq.JToken.LoadAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Threading.CancellationToken>(L, 2))
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				System.Threading.CancellationToken arg1 = StackTraits<System.Threading.CancellationToken>.To(L, 2);
				System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JToken> o = Newtonsoft.Json.Linq.JToken.LoadAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Newtonsoft.Json.Linq.JsonLoadSettings>(L, 2))
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				Newtonsoft.Json.Linq.JsonLoadSettings arg1 = (Newtonsoft.Json.Linq.JsonLoadSettings)ToLua.ToObject(L, 2);
				System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JToken> o = Newtonsoft.Json.Linq.JToken.LoadAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				Newtonsoft.Json.Linq.JsonLoadSettings arg1 = (Newtonsoft.Json.Linq.JsonLoadSettings)ToLua.CheckObject<Newtonsoft.Json.Linq.JsonLoadSettings>(L, 2);
				System.Threading.CancellationToken arg2 = StackTraits<System.Threading.CancellationToken>.Check(L, 3);
				System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JToken> o = Newtonsoft.Json.Linq.JToken.LoadAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JToken.LoadAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeepEquals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Newtonsoft.Json.Linq.JToken arg0 = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			Newtonsoft.Json.Linq.JToken arg1 = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 2);
			bool o = Newtonsoft.Json.Linq.JToken.DeepEquals(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAfterSelf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.AddAfterSelf(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBeforeSelf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.AddBeforeSelf(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Ancestors(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken> o = obj.Ancestors();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AncestorsAndSelf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken> o = obj.AncestorsAndSelf();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AfterSelf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken> o = obj.AfterSelf();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeforeSelf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken> o = obj.BeforeSelf();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			Newtonsoft.Json.Linq.JToken o = obj[arg0];
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			Newtonsoft.Json.Linq.JToken arg1 = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 3);
			obj[arg0] = arg1;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Children(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			Newtonsoft.Json.Linq.JEnumerable<Newtonsoft.Json.Linq.JToken> o = obj.Children();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			obj.Remove();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Replace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			Newtonsoft.Json.Linq.JToken arg0 = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 2);
			obj.Replace(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			Newtonsoft.Json.JsonWriter arg0 = (Newtonsoft.Json.JsonWriter)ToLua.CheckObject<Newtonsoft.Json.JsonWriter>(L, 2);
			Newtonsoft.Json.JsonConverter[] arg1 = ToLua.CheckParamsObject<Newtonsoft.Json.JsonConverter>(L, 3, count - 2);
			obj.WriteTo(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<Newtonsoft.Json.Linq.JToken>(L, 1))
			{
				Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.ToObject(L, 1);
				string o = obj.ToString();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Formatting>(L, 1) && TypeChecker.CheckParamsType<Newtonsoft.Json.JsonConverter>(L, 3, count - 2))
			{
				Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.ToObject(L, 1);
				Newtonsoft.Json.Formatting arg0 = (Newtonsoft.Json.Formatting)ToLua.ToObject(L, 2);
				Newtonsoft.Json.JsonConverter[] arg1 = ToLua.ToParamsObject<Newtonsoft.Json.JsonConverter>(L, 3, count - 2);
				string o = obj.ToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JToken.ToString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateReader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			Newtonsoft.Json.JsonReader o = obj.CreateReader();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FromObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				Newtonsoft.Json.Linq.JToken o = Newtonsoft.Json.Linq.JToken.FromObject(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				Newtonsoft.Json.JsonSerializer arg1 = (Newtonsoft.Json.JsonSerializer)ToLua.CheckObject<Newtonsoft.Json.JsonSerializer>(L, 2);
				Newtonsoft.Json.Linq.JToken o = Newtonsoft.Json.Linq.JToken.FromObject(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JToken.FromObject");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
				System.Type arg0 = ToLua.CheckMonoType(L, 2);
				object o = obj.ToObject(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
				System.Type arg0 = ToLua.CheckMonoType(L, 2);
				Newtonsoft.Json.JsonSerializer arg1 = (Newtonsoft.Json.JsonSerializer)ToLua.CheckObject<Newtonsoft.Json.JsonSerializer>(L, 3);
				object o = obj.ToObject(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JToken.ToObject");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFrom(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				Newtonsoft.Json.Linq.JToken o = Newtonsoft.Json.Linq.JToken.ReadFrom(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				Newtonsoft.Json.Linq.JsonLoadSettings arg1 = (Newtonsoft.Json.Linq.JsonLoadSettings)ToLua.CheckObject<Newtonsoft.Json.Linq.JsonLoadSettings>(L, 2);
				Newtonsoft.Json.Linq.JToken o = Newtonsoft.Json.Linq.JToken.ReadFrom(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JToken.ReadFrom");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Parse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Newtonsoft.Json.Linq.JToken o = Newtonsoft.Json.Linq.JToken.Parse(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Newtonsoft.Json.Linq.JsonLoadSettings arg1 = (Newtonsoft.Json.Linq.JsonLoadSettings)ToLua.CheckObject<Newtonsoft.Json.Linq.JsonLoadSettings>(L, 2);
				Newtonsoft.Json.Linq.JToken o = Newtonsoft.Json.Linq.JToken.Parse(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JToken.Parse");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				Newtonsoft.Json.Linq.JToken o = Newtonsoft.Json.Linq.JToken.Load(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
				Newtonsoft.Json.Linq.JsonLoadSettings arg1 = (Newtonsoft.Json.Linq.JsonLoadSettings)ToLua.CheckObject<Newtonsoft.Json.Linq.JsonLoadSettings>(L, 2);
				Newtonsoft.Json.Linq.JToken o = Newtonsoft.Json.Linq.JToken.Load(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JToken.Load");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SelectToken(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				Newtonsoft.Json.Linq.JToken o = obj.SelectToken(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				Newtonsoft.Json.Linq.JToken o = obj.SelectToken(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JToken.SelectToken");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SelectTokens(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken> o = obj.SelectTokens(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken> o = obj.SelectTokens(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JToken.SelectTokens");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeepClone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			Newtonsoft.Json.Linq.JToken o = obj.DeepClone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAnnotation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.AddAnnotation(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Annotation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			object o = obj.Annotation(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Annotations(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			System.Collections.Generic.IEnumerable<object> o = obj.Annotations(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAnnotations(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			obj.RemoveAnnotations(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EqualityComparer(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Newtonsoft.Json.Linq.JToken.EqualityComparer);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Parent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)o;
			Newtonsoft.Json.Linq.JContainer ret = obj.Parent;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Parent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Root(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)o;
			Newtonsoft.Json.Linq.JToken ret = obj.Root;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Root on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)o;
			Newtonsoft.Json.Linq.JTokenType ret = obj.Type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HasValues(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)o;
			bool ret = obj.HasValues;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HasValues on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Next(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)o;
			Newtonsoft.Json.Linq.JToken ret = obj.Next;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Next on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Previous(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)o;
			Newtonsoft.Json.Linq.JToken ret = obj.Previous;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Previous on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)o;
			string ret = obj.Path;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Path on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_First(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)o;
			Newtonsoft.Json.Linq.JToken ret = obj.First;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index First on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Last(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JToken obj = (Newtonsoft.Json.Linq.JToken)o;
			Newtonsoft.Json.Linq.JToken ret = obj.Last;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Last on a nil value");
		}
	}
}

