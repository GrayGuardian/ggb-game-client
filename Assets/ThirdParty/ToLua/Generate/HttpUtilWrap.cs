//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HttpUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(HttpUtil), typeof(System.Object));
		L.RegFunction("Get", Get);
		L.RegFunction("Post", Post);
		L.RegFunction("Download", Download);
		L.RegFunction("New", _CreateHttpUtil);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("cookies", get_cookies, set_cookies);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHttpUtil(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				HttpUtil obj = new HttpUtil();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: HttpUtil.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string o = obj.Get(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string o = obj.Get(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				string o = obj.Get(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 5)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Text.Encoding arg3 = (System.Text.Encoding)ToLua.CheckObject<System.Text.Encoding>(L, 5);
				string o = obj.Get(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HttpUtil.Get");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Post(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string o = obj.Post(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Net.CookieContainer arg2 = (System.Net.CookieContainer)ToLua.CheckObject<System.Net.CookieContainer>(L, 4);
				string o = obj.Post(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 5)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Net.CookieContainer arg2 = (System.Net.CookieContainer)ToLua.CheckObject<System.Net.CookieContainer>(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				string o = obj.Post(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 6)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Net.CookieContainer arg2 = (System.Net.CookieContainer)ToLua.CheckObject<System.Net.CookieContainer>(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
				string o = obj.Post(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 7)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Net.CookieContainer arg2 = (System.Net.CookieContainer)ToLua.CheckObject<System.Net.CookieContainer>(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
				System.Text.Encoding arg5 = (System.Text.Encoding)ToLua.CheckObject<System.Text.Encoding>(L, 7);
				string o = obj.Post(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HttpUtil.Post");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Download(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.Download(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				obj.Download(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				System.Action arg3 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 5);
				obj.Download(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				System.Action arg3 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 5);
				System.Action<int,int> arg4 = (System.Action<int,int>)ToLua.CheckDelegate<System.Action<int,int>>(L, 6);
				obj.Download(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HttpUtil.Download");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cookies(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HttpUtil obj = (HttpUtil)o;
			System.Net.CookieContainer ret = obj.cookies;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cookies on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cookies(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HttpUtil obj = (HttpUtil)o;
			System.Net.CookieContainer arg0 = (System.Net.CookieContainer)ToLua.CheckObject<System.Net.CookieContainer>(L, 2);
			obj.cookies = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cookies on a nil value");
		}
	}
}

