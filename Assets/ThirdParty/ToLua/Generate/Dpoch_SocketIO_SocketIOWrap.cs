//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Dpoch_SocketIO_SocketIOWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Dpoch.SocketIO.SocketIO), typeof(System.Object));
		L.RegFunction("Connect", Connect);
		L.RegFunction("Close", Close);
		L.RegFunction("On", On);
		L.RegFunction("Off", Off);
		L.RegFunction("Emit", Emit);
		L.RegFunction("New", _CreateDpoch_SocketIO_SocketIO);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IsAlive", get_IsAlive, null);
		L.RegVar("OnOpen", get_OnOpen, set_OnOpen);
		L.RegVar("OnConnectFailed", get_OnConnectFailed, set_OnConnectFailed);
		L.RegVar("OnClose", get_OnClose, set_OnClose);
		L.RegVar("OnError", get_OnError, set_OnError);
		L.RegVar("OnEvent", get_OnEvent, set_OnEvent);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDpoch_SocketIO_SocketIO(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Dpoch.SocketIO.SocketIO obj = new Dpoch.SocketIO.SocketIO(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				Dpoch.SocketIO.SocketIO obj = new Dpoch.SocketIO.SocketIO(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				Dpoch.SocketIO.SocketIO obj = new Dpoch.SocketIO.SocketIO(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Dpoch.SocketIO.SocketIO.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Dpoch.SocketIO.SocketIO obj = (Dpoch.SocketIO.SocketIO)ToLua.CheckObject<Dpoch.SocketIO.SocketIO>(L, 1);
			obj.Connect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Dpoch.SocketIO.SocketIO obj = (Dpoch.SocketIO.SocketIO)ToLua.CheckObject<Dpoch.SocketIO.SocketIO>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int On(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Dpoch.SocketIO.SocketIO obj = (Dpoch.SocketIO.SocketIO)ToLua.CheckObject<Dpoch.SocketIO.SocketIO>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<Dpoch.SocketIO.SocketIOEvent> arg1 = (System.Action<Dpoch.SocketIO.SocketIOEvent>)ToLua.CheckDelegate<System.Action<Dpoch.SocketIO.SocketIOEvent>>(L, 3);
			obj.On(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Off(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Dpoch.SocketIO.SocketIO obj = (Dpoch.SocketIO.SocketIO)ToLua.CheckObject<Dpoch.SocketIO.SocketIO>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<Dpoch.SocketIO.SocketIOEvent> arg1 = (System.Action<Dpoch.SocketIO.SocketIOEvent>)ToLua.CheckDelegate<System.Action<Dpoch.SocketIO.SocketIOEvent>>(L, 3);
			obj.Off(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Emit(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckTypes<Dpoch.SocketIO.SocketIO, string, System.Action<Newtonsoft.Json.Linq.JArray>>(L, 1) && TypeChecker.CheckParamsType<object>(L, 4, count - 3))
			{
				Dpoch.SocketIO.SocketIO obj = (Dpoch.SocketIO.SocketIO)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Action<Newtonsoft.Json.Linq.JArray> arg1 = (System.Action<Newtonsoft.Json.Linq.JArray>)ToLua.ToObject(L, 3);
				object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
				obj.Emit(arg0, arg1, arg2);
				return 0;
			}
			else if (TypeChecker.CheckTypes<Dpoch.SocketIO.SocketIO, string>(L, 1) && TypeChecker.CheckParamsType<object>(L, 3, count - 2))
			{
				Dpoch.SocketIO.SocketIO obj = (Dpoch.SocketIO.SocketIO)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
				obj.Emit(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Dpoch.SocketIO.SocketIO.Emit");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAlive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Dpoch.SocketIO.SocketIO obj = (Dpoch.SocketIO.SocketIO)o;
			bool ret = obj.IsAlive;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsAlive on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnOpen(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnConnectFailed(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnClose(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnError(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<Dpoch.SocketIO.SocketIOException>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<Dpoch.SocketIO.Packet>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnOpen(IntPtr L)
	{
		try
		{
			Dpoch.SocketIO.SocketIO obj = (Dpoch.SocketIO.SocketIO)ToLua.CheckObject(L, 1, typeof(Dpoch.SocketIO.SocketIO));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Dpoch.SocketIO.SocketIO.OnOpen' can only appear on the left hand side of += or -= when used outside of the type 'Dpoch.SocketIO.SocketIO'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnOpen += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnOpen -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnConnectFailed(IntPtr L)
	{
		try
		{
			Dpoch.SocketIO.SocketIO obj = (Dpoch.SocketIO.SocketIO)ToLua.CheckObject(L, 1, typeof(Dpoch.SocketIO.SocketIO));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Dpoch.SocketIO.SocketIO.OnConnectFailed' can only appear on the left hand side of += or -= when used outside of the type 'Dpoch.SocketIO.SocketIO'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnConnectFailed += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnConnectFailed -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnClose(IntPtr L)
	{
		try
		{
			Dpoch.SocketIO.SocketIO obj = (Dpoch.SocketIO.SocketIO)ToLua.CheckObject(L, 1, typeof(Dpoch.SocketIO.SocketIO));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Dpoch.SocketIO.SocketIO.OnClose' can only appear on the left hand side of += or -= when used outside of the type 'Dpoch.SocketIO.SocketIO'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnClose += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnClose -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnError(IntPtr L)
	{
		try
		{
			Dpoch.SocketIO.SocketIO obj = (Dpoch.SocketIO.SocketIO)ToLua.CheckObject(L, 1, typeof(Dpoch.SocketIO.SocketIO));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Dpoch.SocketIO.SocketIO.OnError' can only appear on the left hand side of += or -= when used outside of the type 'Dpoch.SocketIO.SocketIO'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<Dpoch.SocketIO.SocketIOException> ev = (System.Action<Dpoch.SocketIO.SocketIOException>)arg0.func;
				obj.OnError += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<Dpoch.SocketIO.SocketIOException> ev = (System.Action<Dpoch.SocketIO.SocketIOException>)arg0.func;
				obj.OnError -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnEvent(IntPtr L)
	{
		try
		{
			Dpoch.SocketIO.SocketIO obj = (Dpoch.SocketIO.SocketIO)ToLua.CheckObject(L, 1, typeof(Dpoch.SocketIO.SocketIO));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Dpoch.SocketIO.SocketIO.OnEvent' can only appear on the left hand side of += or -= when used outside of the type 'Dpoch.SocketIO.SocketIO'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<Dpoch.SocketIO.Packet> ev = (System.Action<Dpoch.SocketIO.Packet>)arg0.func;
				obj.OnEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<Dpoch.SocketIO.Packet> ev = (System.Action<Dpoch.SocketIO.Packet>)arg0.func;
				obj.OnEvent -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

