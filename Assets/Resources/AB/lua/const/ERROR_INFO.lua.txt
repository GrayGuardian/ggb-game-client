local SUCCESS_CODE = 200
local systemCode = SUCCESS_CODE
local logicCode = 500

local genSystemCode = function()
    systemCode = systemCode + 1
    return systemCode
end

local genLogicCode = function()
    logicCode = logicCode + 1
    return logicCode
end
local ERROR_CODE = {
    SUCCESS = SUCCESS_CODE,
    UNKNOWN_ERROR = genSystemCode(),
    HTTP_ERROR_DATA = genSystemCode(),
    HTTP_ERROR_ROUTER = genSystemCode(),
    HTTP_ERROR_RETURN = genSystemCode(),
    TOKEN_ERROR = genSystemCode(),
    CONNECT_ERROR_KICK = genSystemCode(),
    CONNECT_ERROR_ROUTER = genSystemCode(),
    CONNECT_ERROR_DATA = genSystemCode(),
    CONNECT_ERROR_RETURN = genSystemCode(),
    USER_REPEATED_LOGIN = genSystemCode(),
    PASSWORD_NOTSAME = genLogicCode(),
    USERNAME_EXIST = genLogicCode(),
    USERNAME_NOTVALID = genLogicCode(),
    PASSWORD_NOTVALID = genLogicCode(),
    PASSWORD_ERROR = genLogicCode(),
    AREA_NOTEXIST = genLogicCode(),
    AREA_MAINTENANCE = genLogicCode()
}
local ERROR_MSG = {
    [ERROR_CODE.SUCCESS] = '成功',
    [ERROR_CODE.UNKNOWN_ERROR] = '未知错误',
    [ERROR_CODE.HTTP_ERROR_DATA] = '参数缺省或格式错误',
    [ERROR_CODE.HTTP_ERROR_ROUTER] = '访问路由出错',
    [ERROR_CODE.HTTP_ERROR_RETURN] = '未知错误', --返回数据错误
    [ERROR_CODE.TOKEN_ERROR] = '非法访问', --Token值错误
    [ERROR_CODE.CONNECT_ERROR_KICK] = '连接被断开', --暂时只用于服务器之间的发放
    [ERROR_CODE.CONNECT_ERROR_ROUTER] = '非法路径',
    [ERROR_CODE.CONNECT_ERROR_DATA] = '非法数据',
    [ERROR_CODE.CONNECT_ERROR_RETURN] = '未知错误', --返回数据出错
    [ERROR_CODE.USER_REPEATED_LOGIN] = '账号在别地登录',
    [ERROR_CODE.PASSWORD_NOTSAME] = '两次密码不相同',
    [ERROR_CODE.USERNAME_EXIST] = '用户名已存在',
    [ERROR_CODE.USERNAME_NOTVALID] = '用户名格式错误：6-15位的大小写字母、数字、下划线、星号',
    [ERROR_CODE.PASSWORD_NOTVALID] = '密码格式错误：6-15位的大小写字母、数字、下划线、星号',
    [ERROR_CODE.PASSWORD_ERROR] = '密码错误',
    [ERROR_CODE.AREA_NOTEXIST] = '区服不存在',
    [ERROR_CODE.AREA_MAINTENANCE] = '区服正在维护'
}
local genErrorMsg = function(code)
    local data = {}
    local msg = ERROR_MSG[code]
    data.code = code
    data.msg = msg == nil and ERROR_MSG[ERROR_CODE.UNKNOWN_ERROR] or msg
    return data
end

return {SUCCESS_CODE = SUCCESS_CODE, ERROR_CODE = ERROR_CODE, genErrorMsg = genErrorMsg}
