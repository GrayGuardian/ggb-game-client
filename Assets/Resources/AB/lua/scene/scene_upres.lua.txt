local base = require("scene_base")
local SceneUpres = class("SceneUpres", base)

function SceneUpres:onLoad()
    print("Scene_Upres onLoad")
    ui:showUI("ui_upres")

    self.refdata = resUtil:GetRefData();
    print(self.refdata.size);
    print(string.format("更新状态：%s refdata:%s",self.refdata.type,self.refdata.data:toString()))
    if self.refdata.type == 0 then
        self:upResOver();
    elseif self.refdata.type == 1 then
        ui:showUI("ui_upres_tip",
        {
            msg="需要手动下载安装包进行更新，是否前往下载？",
            btnTitle = "前往下载",
            onClick = function ()
                print("转跳下载，退出游戏");
                Application.Quit();
            end
        });
    elseif self.refdata.type == 2 then
        ui:showUI("ui_upres_tip",
        {
            msg=string.format("首次下载资源文件，共计需要下载%s资源文件",utils.sizeFormat(self.refdata.size)),
            btnTitle = "开始下载",
            onClick = function ()
                self:downloadRes();
            end
        });
    elseif self.refdata.type == 3 then
        ui:showUI("ui_upres_tip",
        {
            msg=string.format("发现新版本，共计需要下载%s资源文件",utils.sizeFormat(self.refdata.size)),
            btnTitle = "开始下载",
            onClick = function ()
                self:downloadRes();
            end
        });
    elseif self.refdata.type == 4 then
        self:upResOver();
    elseif self.refdata.type == 5 then
        ui:showUI("ui_upres_tip",
        {
            msg=string.format("文件损坏,需要重新下载\n共计需要下载%s资源文件",utils.sizeFormat(self.refdata.size)),
            btnTitle = "开始下载",
            onClick = function ()
                self:downloadRes();
            end
        });
    end
end
function SceneUpres:downloadRes()
    print("开始下载资源")
    self:downloadABFile(
        self.refdata.data.ABs,
        function ()
            self:downloadResOver();
        end,
        function (abInfo)
            print(string.format("AB包[%s]开始更新",abInfo.name));
        end,
        function (abInfo)
            print(string.format("AB包[%s]更新完毕",abInfo.name));
        end,
        function (abInfo,order,size,count)
            print(string.format("AB包[%s]正在下载：[%s/%s]：%s/%s",abInfo.name,order+1,self.refdata.data.ABs.Length,utils.sizeFormat(size),utils.sizeFormat(count)));
        end
    )
end
function SceneUpres:downloadResOver()
    print("资源全部下载完毕");
    self:upResOver();
end
function SceneUpres:upResOver()
    print("资源全部更新完毕");
    resUtil:UpVersion();
    resUtil:ClearRedundantRes();
    self:allOver();
end
function SceneUpres:allOver()
    print("全部更新完毕");
    ui:loadScene("Login");
end

function SceneUpres:downloadABFile(abInfos,allDownloadOverEvent,singleDownloadStartEvent,singleDownloadOverEvent,singleDownloadUpdateEvent,order)
    print(abInfos);
    order = order and order or 0;
    if abInfos.Length <= order then
        if allDownloadOverEvent ~= nil then 
            allDownloadOverEvent();
        end
        return;
    end
    local abInfo = abInfos:GetValue(order);
    
    if singleDownloadStartEvent ~= nil then 
        singleDownloadStartEvent(abInfo);
    end

    local download_url = string.format("%sAssetBundles/%s",GameConst.DOWNLOAD_URL,abInfo.name);
    local save_path = string.format("%s/AssetBundles/%s",GameConst.RES_LOCAL_ROOT,abInfo.name)
    local temp_fileName = string.format("%s_%s.temp",abInfo.name,abInfo.hash)
    httpUtil:Download(download_url,save_path,temp_fileName,
        function()
            if singleDownloadOverEvent ~= nil then 
                singleDownloadOverEvent(abInfo);
            end
            self:downloadABFile(abInfos, allDownloadOverEvent, singleDownloadStartEvent, singleDownloadOverEvent, singleDownloadUpdateEvent, order + 1);
        end,       
        function(downloadSize, countSize)
            if singleDownloadUpdateEvent ~= nil then 
                singleDownloadUpdateEvent(abInfo, order, downloadSize, countSize);
            end
        end
    )
    --print(string.format("download_url:%s\nsave_path:%s\ntemp_fileName:%s",download_url,save_path,temp_fileName))
    
end
return SceneUpres
