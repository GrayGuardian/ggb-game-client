local CompBase = class("UIBase")

------------------- 继承重写 -------------------
-- Mono生命周期

-- Button点击事件 组件名首字母自动大写 o-组件实例 order-组件序号，可区分多个重名组件
-- function UITip:on[UIComp_Button_Name]Click(o,order)

-- end
function CompBase:onLoad()
end
function CompBase:onDestroy()
end
------------------- 继承重写 -------------------

function CompBase:init(name, param)
    print("加载Comp-", name, " Init >", " name:", name, " param:", utils.serialize(param))
    self.name = name
    self.param = param
    self.csComp = nil
    self.node = nil

    self.uiComp = {}
    self.timerMap = {}
    self.broadcastMap = {}
end

--绑定物体
function CompBase:bind(csComp)
    self.csComp = csComp
    self.node = csComp.transform

    self:monoLifecycleInit()
    self:uiCompInit()
    self:_onLoad()
end

--Mono生命周期初始化
function CompBase:monoLifecycleInit()
    local monoListEvent =
        System.Action_string_objects(
        function(key, param)
            local action = self[key]
            if action == nil then
                return
            end
            if param == nil or param.Length == 0 then
                action(self)
            elseif param.Length == 1 then
                action(self, param:GetValue(0))
            elseif param.Length == 2 then
                action(self, param:GetValue(0), param:GetValue(1))
            end
        end
    )
    self:broadcast_on(
        BROADCAST_CODE.MONO_QUIT,
        function()
            self.csComp:DelListenEvent(monoListEvent)
        end
    )
    self.csComp:AddListenEvent(monoListEvent)
end
-- ui组件初始化
function CompBase:uiCompInit()
    local types = {"Text", "Image", "Button", "InputField"}

    for index, t in ipairs(types) do
        self.uiComp[t] = {}
        local arr = comp:getCSComponentsInChildren(self.node, UEUI[t])
        for i = 0, arr.Length - 1 do
            local comp = arr:GetValue(i)
            local key = comp.name
            if type(self.uiComp[t][key]) == "table" then
                table.insert(self.uiComp[t][key], comp)
            else
                -- body
                if self.uiComp[t][key] == nil then
                    self.uiComp[t][key] = comp
                else
                    --print("ui已存在", #self.uiComp[t][key])
                    local tempComp = self.uiComp[t][key]
                    self.uiComp[t][key] = {}
                    table.insert(self.uiComp[t][key], tempComp)
                    table.insert(self.uiComp[t][key], comp)
                end
            end
            --print("加入CompUI>>", " type:", t, "  name:", key)
        end
    end

    -- 注册Button事件
    for key, comp in pairs(self.uiComp.Button) do
        local sum = 0
        local e = nil
        if type(comp) == "table" then
            e = "on" .. comp[1].name:gsub("^%l", string.upper) .. "Click"
        else
            e = "on" .. comp.name:gsub("^%l", string.upper) .. "Click"
        end
        if self[e] ~= nil then
            if type(comp) == "table" then
                sum = #comp
                for i, comp1 in pairs(comp) do
                    comp1.onClick:AddListener(
                        function()
                            self[e](self, comp1, i)
                        end
                    )
                end
            else
                sum = 1
                comp.onClick:AddListener(
                    function()
                        self[e](self, comp, 1)
                    end
                )
            end
        end

        --print("注册Button事件>", e, "  共计注册：", sum)
    end
end

function CompBase:_onLoad()
    print("加载Comp-" .. self.name .. ">>>>>>>>>>>>>>>>>>>>>>>> onLoad")
    self:onLoad()
end
function CompBase:_onDestroy()
    print("卸载Comp-" .. self.name .. " >>>>>>>>>>>>>>>>>>>>>>>> onDestroy")
    self:timer_clear()
    self:broadcast_clear()
    self:onDestroy()
end
-- 卸载
function CompBase:close()
    --ui:closeUI(self)
end
function CompBase:timer_on(time, loopCount, onTrigger)
    local t = timer:on(time, loopCount, onTrigger)
    table.insert(self.timerMap, t)
end
function CompBase:timer_out(t)
    timer:out(t)
    table.del(self.timerMap, t)
end
function CompBase:timer_clear()
    for index, t in ipairs(self.timerMap) do
        self:timer_out(t)
    end
    self.timerMap = {}
end
function CompBase:broadcast_on(key, callback, order, isOnce)
    if broadcast:on(key, callback, order, isOnce) then
        local info = {key = key, callback = callback}
        table.insert(self.broadcastMap, info)
    end
end
function CompBase:broadcast_out(key, callback)
    broadcast:out(key, callback)
    table.del(self.broadcastMap, {key = key, callback = callback})
end
function CompBase:broadcast_clear()
    for index, info in ipairs(self.broadcastMap) do
        self:broadcast_out(info.key, info.callback)
    end
    self.broadcastMap = {}
end

return CompBase
